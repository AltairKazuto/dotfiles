eval %sh{ kak-lsp --kakoune -s $kak_session }

colorscheme cherry

# Plugins
source "%val{config}/bundle/kak-bundle/rc/kak-bundle.kak"
bundle-noload kak-bundle https://codeberg.org/jdugan6240/kak-bundle

bundle kak-lsp https://github.com/kak-lsp/kak-lsp %{
  # Configure here...
  map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
}

bundle kak-tree https://github.com/ul/kak-tree

bundle-install-hook kak-tree %{
    cargo install --path . --force --features "rust javascript"
    cp rc/tree.kak ~/.config/kak/autoload/
}

#bundle kak-vue https://github.com/ABuffSeagull/kakoune-vue

bundle-install-hook kak-lsp %{
  cargo install --locked --force --path .
}

# LSPs
#
lsp-inlay-hints-enable global

bundle auto-pairs https://github.com/alexherbo2/auto-pairs.kak
enable-auto-pairs

bundle kakoune-focus https://github.com/caksoylar/kakoune-focus

bundle powerline-kak https://github.com/andreyorst/powerline.kak 
powerline-start


bundle surround https://github.com/h-youhei/kakoune-surround

remove-hooks global lsp-filetype-.*

hook -group lsp-filetype-vue global BufSetOption filetype=(?:vue|javascript) %{
    set-option buffer lsp_servers %{
        [typescript-language-server]
        root_globs = ["package.json", "tsconfig.json", "jsconfig.json", ".git", ".hg"]
        args = ["--stdio"]
        settings_section = "_"
        [typescript-language-server.settings._]
        "plugins" = [{name = "@vue/typescript-plugin", location = "/usr/local/lib/node_modules/@vue/language-server", languages = ["vue"]}]
        [tailwindcss-language-server]
        root_globs = ["tailwind.*"]
        args = ["--stdio"]
        [tailwindcss-language-server.settings.tailwindCSS]
        editor = {}
        # [vue-language-server]
        # root_globs = ["package.json", "tsconfig.json", "jsconfig.json"]
        # args = ["--stdio"]
        # settings_section = "_"
        # [vue-language-server.settings._]
        # vue = {hybridMode = false }
    }
# }

# Columns Highlighting
add-highlighter global/ show-whitespaces -indent '▏' -spc ' '
# Line Number Highlighting
add-highlighter global/ number-lines -hlcursor -separator '  '

# User Keymaps
map global normal I K -docstring 'extend move up'
map global normal J H -docstring 'extend move left'
map global normal K J -docstring 'extend move down'
map global normal L L -docstring 'extend move right'

map global normal h i -docstring 'insert mode'
map global normal i k -docstring 'move up'
map global normal j h -docstring 'move left'
map global normal k j -docstring 'move down'
map global normal l l -docstring 'move right'

map global user b ':buffer-previous<ret>' -docstring 'previous buffer'
map global user n ':buffer-next<ret>' -docstring 'next buffer'
map global user s ':surround<ret>' -docstring 'surround with: '

# Clipboard yank
hook global RegisterModified '"' %{ nop %sh{
  printf %s "$kak_main_reg_dquote" | wl-copy > /dev/null 2>&1 &}}
# Map keys for common LSP features
# map global normal <space>gd ': lsp-definition<ret>'
# map global normal <space>gr ': lsp-references<ret>'
# map global normal <space>gi ': lsp-implementation<ret>'
# map global normal <space>k ': lsp-hover<ret>'
# map global normal <space>r ': lsp-rename<ret>'
# map global normal <space>ca ': lsp-code-actions<ret>'
# map global normal <space>f ': lsp-formatting-sync<ret>'

# Detection
# ‾‾‾‾‾‾‾‾‾

# hook global BufCreate .*\.vue %{
# 	set-option buffer filetype vue
# }

# # Initialization
# # ‾‾‾‾‾‾‾‾‾‾‾‾‾‾

# hook -group vue-highlight global WinSetOption filetype=vue %{ add-highlighter window/vue ref vue }

# hook global WinSetOption filetype=vue %{
# 	require-module vue

# 	hook window ModeChange insert:.* -group vue-hooks  vue-filter-around-selections
# 	hook window InsertChar '>' -group vue-indent vue-indent-on-greater-than
# 	hook window InsertChar \n -group vue-indent vue-indent-on-new-line
# 	set  window comment_line        '//'
# 	set  window comment_block_begin '<!--'
# 	set  window comment_block_end   '-->'
# }

# hook -group vue-highlight global WinSetOption filetype=(?!vue).* %{ remove-highlighter window/vue }

# hook global WinSetOption filetype=(?!vue).* %{
# 	remove-hooks window vue-indent
# 	remove-hooks window vue-hooks
# }

# provide-module vue %[

# try %{
# 	require-module html
# 	require-module css
# 	require-module javascript
# 	require-module pug
# 	require-module scss
# 	require-module less
# }

# # Highlighters
# # ‾‾‾‾‾‾‾‾‾‾‾‾

# add-highlighter shared/vue regions
# add-highlighter shared/vue/tag  region  <          >  regions
# add-highlighter shared/vue/pug  region  <template\b.*?lang="pug".*?>\K      (?=</template>) ref pug
# add-highlighter shared/vue/html region  <template\b.*?>\K                   (?=</template>) ref html
# add-highlighter shared/vue/scss region  <style\b.*?lang="scss".*?>\K        (?=</style>)    ref scss
# add-highlighter shared/vue/sass region  <style\b.*?lang="sass".*?>\K        (?=</style>)    ref sass
# add-highlighter shared/vue/less region  <style\b.*?lang="less".*?>\K        (?=</style>)    ref less
# add-highlighter shared/vue/css  region  <style\b.*?>\K                      (?=</style>)    ref css
# add-highlighter shared/vue/ts   region  <script\b.*?lang="ts".*?>\K (?=</script>)   ref typescript
# add-highlighter shared/vue/js   region  <script\b.*?>\K                     (?=</script>)   ref javascript

# add-highlighter shared/vue/tag/base default-region group
# add-highlighter shared/vue/tag/ region '"' (?<!\\)(\\\\)*" fill string
# add-highlighter shared/vue/tag/ region "'" "'"             fill string

# add-highlighter shared/vue/tag/base/ regex \b([a-zA-Z0-9_-]+)=? 1:attribute
# add-highlighter shared/vue/tag/base/ regex </?(\w+) 1:keyword

# # Commands
# # ‾‾‾‾‾‾‾‾

# define-command -hidden vue-filter-around-selections %{
# 	# remove trailing white spaces
# 	try %{ execute-keys -draft -itersel <a-x> s \h+$ <ret> d }
# }

# define-command -hidden vue-indent-on-greater-than %[
# 	evaluate-commands -draft -itersel %[
# 		# align closing tag to opening when alone on a line
# 		try %[ execute-keys -draft <space> <a-h> s ^\h+<lt>/(\w+)<gt>$ <ret> {c<lt><c-r>1,<lt>/<c-r>1<gt> <ret> s \A|.\z <ret> 1<a-&> ]
# 	]
# ]

# define-command -hidden vue-indent-on-new-line %{
# 	evaluate-commands -draft -itersel %{
# 		# preserve previous line indent
# 		try %{ execute-keys -draft \; K <a-&> }
# 		# filter previous line
# 		try %{ execute-keys -draft k : vue-filter-around-selections <ret> }
# 		# indent after lines ending with opening tag
# 		try %{ execute-keys -draft k <a-x> <a-k> <[^/][^>]+>$ <ret> j <a-gt> }
# 	}
# }

# ]
